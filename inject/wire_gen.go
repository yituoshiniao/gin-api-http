// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package inject

import (
	"github.com/yituoshiniao/gin-api-http/config"
	"github.com/yituoshiniao/gin-api-http/internal/api/cron"
	"github.com/yituoshiniao/gin-api-http/internal/api/http"
	"github.com/yituoshiniao/gin-api-http/internal/api/http/asynqdemo"
	"github.com/yituoshiniao/gin-api-http/internal/api/http/auth"
	"github.com/yituoshiniao/gin-api-http/internal/api/http/servicev1"
	"github.com/yituoshiniao/gin-api-http/internal/app"
	"github.com/yituoshiniao/gin-api-http/internal/conn"
	"github.com/yituoshiniao/gin-api-http/internal/conn/asynq"
	"github.com/yituoshiniao/gin-api-http/internal/metrics"
	"github.com/yituoshiniao/gin-api-http/internal/module/auth/application/service"
	"github.com/yituoshiniao/gin-api-http/internal/module/mockv2/application/repository"
	service2 "github.com/yituoshiniao/gin-api-http/internal/module/mockv2/application/service"
	"github.com/yituoshiniao/gin-api-http/internal/router"
	"github.com/yituoshiniao/gin-api-http/internal/router/v1"
	"github.com/yituoshiniao/gin-api-http/internal/task"
	"github.com/yituoshiniao/gin-api-http/internal/task/queue"
	"github.com/yituoshiniao/gin-api-http/internal/task/scheduler"
	"github.com/yituoshiniao/gin-api-http/internal/util"
)

// Injectors from wire.go:

func InitApp() (*app.App, func(), error) {
	string2 := app.InitEnv()
	configConfig := config.ParseConfig(string2)
	engine := app.InitGin(configConfig)
	logger, cleanup, err := ProvideLogger(configConfig)
	if err != nil {
		return nil, nil, err
	}
	tracer, cleanup2 := ProvideTracer(configConfig)
	idClient := conn.NewIDClient(configConfig, logger, tracer)
	counterMetrics := metrics.NewCounterMetrics()
	response := http.NewResponse(counterMetrics, tracer, logger)
	context := app.InitCtx()
	snowflakeID, err := util.NewSnowflakeIDClient(configConfig, context)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	generateIDSrv := servicev1.NewGenerateIDSrv(response, snowflakeID)
	client := conn.NewRedis(configConfig)
	jwtTokenSrv := service.NewJwtTokenSrv(response, client)
	appJwtTokenSrv := auth.NewAppJwtTokenSrv(response, client, jwtTokenSrv)
	asynqClient, cleanup3 := asynq.NewAsynqClient(configConfig)
	emailDeliveryTask := queue.NewEmailDeliveryTask()
	groupEmailDeliveryTask := queue.NewNewGroupEmailDeliveryTask()
	taskGroupProducer := asynqdemo.NewTaskGroupProducer(asynqClient, response, emailDeliveryTask, groupEmailDeliveryTask)
	taskProducer := asynqdemo.NewTaskProducer(asynqClient, response, emailDeliveryTask)
	goodsCenterRouter := v1.NewGoodsCenterRouter(idClient, generateIDSrv, appJwtTokenSrv, taskGroupProducer, taskProducer)
	goodsCenterDB, cleanup4 := conn.NewGoodsCenterDB(configConfig, logger)
	userScoreRepo := repository.NewUserScoreRepo(goodsCenterDB)
	userScoreSrv := service2.NewUserScoreSrv(userScoreRepo, client)
	testSrv := servicev1.NewTestSrv(response, userScoreSrv)
	testV2Srv := servicev1.NewTestV2Srv(response)
	servicev1UserScoreSrv := servicev1.NewUserScoreSrv(response, userScoreSrv)
	goodsCenterTestV2 := v1.NewGoodsCenterTestV2(testSrv, testV2Srv, servicev1UserScoreSrv)
	routerRouter := router.NewRouter(engine, goodsCenterRouter, goodsCenterTestV2, configConfig)
	enter := app.NewEnter(configConfig)
	cronTestSrv := cron.NewTestSrv(context)
	factoryTemplateSrv := cron.NewFactoryTemplateSrv(cronTestSrv)
	cronEnter := cron.NewEnter(counterMetrics, factoryTemplateSrv)
	cronSingleAppleProductPriceTask := task.NewCronSingleAppleProductPriceTask(context)
	taskEnter, cleanup5 := task.NewEnter(context, counterMetrics, logger, cronSingleAppleProductPriceTask)
	summaryMetrics := metrics.NewSummaryMetrics()
	server := asynq.NewAsynqServer(context, configConfig)
	asynqScheduler := asynq.NewAsynqSchedulerctx(context, configConfig)
	periodicTaskManager := asynq.NewAsynqPeriodicTaskManager(context, configConfig)
	serveMux := asynq.NewAsynqServeMux()
	asynqEnter := app.NewAsynqEnter(configConfig)
	testSched := scheduler.NewTestSched(asynqScheduler)
	dynamicPeriodicTaskSched := scheduler.NewDynamicPeriodicTaskSched()
	registerTask := queue.NewRegisterTask(serveMux, emailDeliveryTask, groupEmailDeliveryTask, testSched, dynamicPeriodicTaskSched)
	registerSched := scheduler.NewRegisterSched(testSched, configConfig, context)
	appApp := app.NewApp(configConfig, routerRouter, context, engine, enter, cronEnter, taskEnter, counterMetrics, summaryMetrics, server, asynqScheduler, periodicTaskManager, serveMux, asynqEnter, registerTask, registerSched)
	return appApp, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
