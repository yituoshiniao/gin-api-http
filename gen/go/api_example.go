/*
gin-http API

gin-http服务文档

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ExampleAPIService ExampleAPI service
type ExampleAPIService service

type ApiV1ExampleGetGetRequest struct {
	ctx context.Context
	ApiService *ExampleAPIService
	createTime *int32
	queryId *string
	userId *string
}

// create_time
func (r ApiV1ExampleGetGetRequest) CreateTime(createTime int32) ApiV1ExampleGetGetRequest {
	r.createTime = &createTime
	return r
}

// query_id
func (r ApiV1ExampleGetGetRequest) QueryId(queryId string) ApiV1ExampleGetGetRequest {
	r.queryId = &queryId
	return r
}

// user_id 用户id
func (r ApiV1ExampleGetGetRequest) UserId(userId string) ApiV1ExampleGetGetRequest {
	r.userId = &userId
	return r
}

func (r ApiV1ExampleGetGetRequest) Execute() (*InternalApiDtoExampleGetResponse, *http.Response, error) {
	return r.ApiService.V1ExampleGetGetExecute(r)
}

/*
V1ExampleGetGet get接口示例

get接口示例

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ExampleGetGetRequest
*/
func (a *ExampleAPIService) V1ExampleGetGet(ctx context.Context) ApiV1ExampleGetGetRequest {
	return ApiV1ExampleGetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//	@return	InternalApiDtoExampleGetResponse
func (a *ExampleAPIService) V1ExampleGetGetExecute(r ApiV1ExampleGetGetRequest) (*InternalApiDtoExampleGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InternalApiDtoExampleGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExampleAPIService.V1ExampleGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/exampleGet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTime == nil {
		return localVarReturnValue, nil, reportError("createTime is required and must be specified")
	}
	if r.queryId == nil {
		return localVarReturnValue, nil, reportError("queryId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "create_time", r.createTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "query_id", r.queryId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ExampleGetOneGetRequest struct {
	ctx context.Context
	ApiService *ExampleAPIService
	createTime *int32
	queryId *string
	userId *string
}

// create_time
func (r ApiV1ExampleGetOneGetRequest) CreateTime(createTime int32) ApiV1ExampleGetOneGetRequest {
	r.createTime = &createTime
	return r
}

// query_id
func (r ApiV1ExampleGetOneGetRequest) QueryId(queryId string) ApiV1ExampleGetOneGetRequest {
	r.queryId = &queryId
	return r
}

// user_id 用户id
func (r ApiV1ExampleGetOneGetRequest) UserId(userId string) ApiV1ExampleGetOneGetRequest {
	r.userId = &userId
	return r
}

func (r ApiV1ExampleGetOneGetRequest) Execute() (*InternalApiDtoExampleGetOneResponse, *http.Response, error) {
	return r.ApiService.V1ExampleGetOneGetExecute(r)
}

/*
V1ExampleGetOneGet getOne接口示例

getOne接口示例

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ExampleGetOneGetRequest
*/
func (a *ExampleAPIService) V1ExampleGetOneGet(ctx context.Context) ApiV1ExampleGetOneGetRequest {
	return ApiV1ExampleGetOneGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//	@return	InternalApiDtoExampleGetOneResponse
func (a *ExampleAPIService) V1ExampleGetOneGetExecute(r ApiV1ExampleGetOneGetRequest) (*InternalApiDtoExampleGetOneResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InternalApiDtoExampleGetOneResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExampleAPIService.V1ExampleGetOneGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/exampleGetOne"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTime == nil {
		return localVarReturnValue, nil, reportError("createTime is required and must be specified")
	}
	if r.queryId == nil {
		return localVarReturnValue, nil, reportError("queryId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "create_time", r.createTime, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "query_id", r.queryId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ExamplePostPostRequest struct {
	ctx context.Context
	ApiService *ExampleAPIService
	body *InternalApiDtoExamplePostRequest
}

// 请求参数
func (r ApiV1ExamplePostPostRequest) Body(body InternalApiDtoExamplePostRequest) ApiV1ExamplePostPostRequest {
	r.body = &body
	return r
}

func (r ApiV1ExamplePostPostRequest) Execute() (*InternalApiDtoExamplePostResponse, *http.Response, error) {
	return r.ApiService.V1ExamplePostPostExecute(r)
}

/*
V1ExamplePostPost post 接口 示例


ios购买项类型 <a href="https://developer.apple.com/documentation/appstoreconnectapi/list_all_in-app_purchases_for_an_app"> 详情</a> </br> 


android订阅 <a href="https://developers.google.com/android-publisher/api-ref/rest/v3/monetization.subscriptions/list?hl=zh-cn"> 详情</a> </br> 

android非订阅<a href="https://developers.google.com/android-publisher/api-ref/rest/v3/inappproducts/list?hl=zh-cn"> 详情</a> </br> 

android订阅产品的类型<a href="https://developers.google.com/android-publisher/api-ref/rest/v3/inappproducts?hl=zh-cn#PurchaseType"> 详情</a> </br>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ExamplePostPostRequest
*/
func (a *ExampleAPIService) V1ExamplePostPost(ctx context.Context) ApiV1ExamplePostPostRequest {
	return ApiV1ExamplePostPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//	@return	InternalApiDtoExamplePostResponse
func (a *ExampleAPIService) V1ExamplePostPostExecute(r ApiV1ExamplePostPostRequest) (*InternalApiDtoExamplePostResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InternalApiDtoExamplePostResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExampleAPIService.V1ExamplePostPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/examplePost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
