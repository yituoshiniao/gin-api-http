// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yituoshiniao/gin-api-http/gen/dao/model"
)

func newUserScore(db *gorm.DB, opts ...gen.DOOption) userScore {
	_userScore := userScore{}

	_userScore.userScoreDo.UseDB(db, opts...)
	_userScore.userScoreDo.UseModel(&model.UserScore{})

	tableName := _userScore.userScoreDo.TableName()
	_userScore.ALL = field.NewAsterisk(tableName)
	_userScore.ID = field.NewInt32(tableName, "id")
	_userScore.UserID = field.NewString(tableName, "user_id")
	_userScore.ScoreResult = field.NewInt32(tableName, "score_result")
	_userScore.ZeroTimestamp = field.NewInt64(tableName, "zero_timestamp")
	_userScore.CreateTime = field.NewInt64(tableName, "create_time")
	_userScore.UpdateTime = field.NewInt64(tableName, "update_time")
	_userScore.Score = field.NewInt32(tableName, "score")

	_userScore.fillFieldMap()

	return _userScore
}

type userScore struct {
	userScoreDo userScoreDo

	ALL           field.Asterisk
	ID            field.Int32
	UserID        field.String
	ScoreResult   field.Int32
	ZeroTimestamp field.Int64
	CreateTime    field.Int64
	UpdateTime    field.Int64
	Score         field.Int32

	fieldMap map[string]field.Expr
}

func (u userScore) Table(newTableName string) *userScore {
	u.userScoreDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userScore) As(alias string) *userScore {
	u.userScoreDo.DO = *(u.userScoreDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userScore) updateTableName(table string) *userScore {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.ScoreResult = field.NewInt32(table, "score_result")
	u.ZeroTimestamp = field.NewInt64(table, "zero_timestamp")
	u.CreateTime = field.NewInt64(table, "create_time")
	u.UpdateTime = field.NewInt64(table, "update_time")
	u.Score = field.NewInt32(table, "score")

	u.fillFieldMap()

	return u
}

func (u *userScore) WithContext(ctx context.Context) *userScoreDo {
	return u.userScoreDo.WithContext(ctx)
}

func (u userScore) TableName() string { return u.userScoreDo.TableName() }

func (u userScore) Alias() string { return u.userScoreDo.Alias() }

func (u userScore) Columns(cols ...field.Expr) gen.Columns { return u.userScoreDo.Columns(cols...) }

func (u *userScore) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userScore) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["score_result"] = u.ScoreResult
	u.fieldMap["zero_timestamp"] = u.ZeroTimestamp
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["score"] = u.Score
}

func (u userScore) clone(db *gorm.DB) userScore {
	u.userScoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userScore) replaceDB(db *gorm.DB) userScore {
	u.userScoreDo.ReplaceDB(db)
	return u
}

type userScoreDo struct{ gen.DO }

func (u userScoreDo) Debug() *userScoreDo {
	return u.withDO(u.DO.Debug())
}

func (u userScoreDo) WithContext(ctx context.Context) *userScoreDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userScoreDo) ReadDB() *userScoreDo {
	return u.Clauses(dbresolver.Read)
}

func (u userScoreDo) WriteDB() *userScoreDo {
	return u.Clauses(dbresolver.Write)
}

func (u userScoreDo) Session(config *gorm.Session) *userScoreDo {
	return u.withDO(u.DO.Session(config))
}

func (u userScoreDo) Clauses(conds ...clause.Expression) *userScoreDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userScoreDo) Returning(value interface{}, columns ...string) *userScoreDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userScoreDo) Not(conds ...gen.Condition) *userScoreDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userScoreDo) Or(conds ...gen.Condition) *userScoreDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userScoreDo) Select(conds ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userScoreDo) Where(conds ...gen.Condition) *userScoreDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userScoreDo) Order(conds ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userScoreDo) Distinct(cols ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userScoreDo) Omit(cols ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userScoreDo) Join(table schema.Tabler, on ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userScoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userScoreDo) RightJoin(table schema.Tabler, on ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userScoreDo) Group(cols ...field.Expr) *userScoreDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userScoreDo) Having(conds ...gen.Condition) *userScoreDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userScoreDo) Limit(limit int) *userScoreDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userScoreDo) Offset(offset int) *userScoreDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userScoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userScoreDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userScoreDo) Unscoped() *userScoreDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userScoreDo) Create(values ...*model.UserScore) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userScoreDo) CreateInBatches(values []*model.UserScore, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userScoreDo) Save(values ...*model.UserScore) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userScoreDo) First() (*model.UserScore, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserScore), nil
	}
}

func (u userScoreDo) Take() (*model.UserScore, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserScore), nil
	}
}

func (u userScoreDo) Last() (*model.UserScore, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserScore), nil
	}
}

func (u userScoreDo) Find() ([]*model.UserScore, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserScore), err
}

func (u userScoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserScore, err error) {
	buf := make([]*model.UserScore, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userScoreDo) FindInBatches(result *[]*model.UserScore, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userScoreDo) Attrs(attrs ...field.AssignExpr) *userScoreDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userScoreDo) Assign(attrs ...field.AssignExpr) *userScoreDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userScoreDo) Joins(fields ...field.RelationField) *userScoreDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userScoreDo) Preload(fields ...field.RelationField) *userScoreDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userScoreDo) FirstOrInit() (*model.UserScore, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserScore), nil
	}
}

func (u userScoreDo) FirstOrCreate() (*model.UserScore, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserScore), nil
	}
}

func (u userScoreDo) FindByPage(offset int, limit int) (result []*model.UserScore, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userScoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userScoreDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userScoreDo) Delete(models ...*model.UserScore) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userScoreDo) withDO(do gen.Dao) *userScoreDo {
	u.DO = *do.(*gen.DO)
	return u
}
